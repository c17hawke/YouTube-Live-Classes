{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Live YouTube Lecture Lectures taken by me till date on YouTube channel of iNeuron Intelligence Note Check the respective tabs on left for more details and video link. Lecture 06 : How to use python plus your phone to control your system by Sunny | Day 6 Lecture 05 : How to manage files on your phone using python By Sunny | Day 5 Lecture 04 : How to use google Colab effectively | Day 4 Lecture 03 : Solve Day to Day Problems Using Python Live Session - 3 | Day 3 Lecture 02 : Solve Day to Day Problems Using Python Live Session - 2 | Day 2 Lecture 01 : Solve Day to Day Problems Using Python Live Session - 1 | Day 1","title":"Home"},{"location":"#live-youtube-lecture","text":"Lectures taken by me till date on YouTube channel of iNeuron Intelligence Note Check the respective tabs on left for more details and video link.","title":"Live YouTube Lecture"},{"location":"#lecture-06-how-to-use-python-plus-your-phone-to-control-your-system-by-sunny-day-6","text":"","title":"Lecture 06: How to use python plus your phone to control your system by Sunny | Day 6"},{"location":"#lecture-05-how-to-manage-files-on-your-phone-using-python-by-sunny-day-5","text":"","title":"Lecture 05: How to manage files on your phone using python By Sunny | Day 5"},{"location":"#lecture-04-how-to-use-google-colab-effectively-day-4","text":"","title":"Lecture 04: How to use google Colab effectively | Day 4"},{"location":"#lecture-03-solve-day-to-day-problems-using-python-live-session-3-day-3","text":"","title":"Lecture 03: Solve Day to Day Problems Using Python Live Session - 3 | Day 3"},{"location":"#lecture-02-solve-day-to-day-problems-using-python-live-session-2-day-2","text":"","title":"Lecture 02: Solve Day to Day Problems Using Python Live Session - 2 | Day 2"},{"location":"#lecture-01-solve-day-to-day-problems-using-python-live-session-1-day-1","text":"","title":"Lecture 01: Solve Day to Day Problems Using Python Live Session - 1 | Day 1"},{"location":"lec01/","text":"Lecture 01: Solve Day to Day Problems Using Python Live Session - 1","title":"Lecture 01"},{"location":"lec01/#lecture-01","text":"","title":"Lecture 01:"},{"location":"lec01/#solve-day-to-day-problems-using-python-live-session-1","text":"","title":"Solve Day to Day Problems Using Python Live Session - 1"},{"location":"lec02/","text":"Lecture 02: Solve Day to Day Problems Using Python Live Session - 2","title":"Lecture 02"},{"location":"lec02/#lecture-02","text":"","title":"Lecture 02:"},{"location":"lec02/#solve-day-to-day-problems-using-python-live-session-2","text":"","title":"Solve Day to Day Problems Using Python Live Session - 2"},{"location":"lec03/","text":"Lecture 03: Solve Day to Day Problems Using Python Live Session - 3","title":"Lecture 03"},{"location":"lec03/#lecture-03","text":"","title":"Lecture 03:"},{"location":"lec03/#solve-day-to-day-problems-using-python-live-session-3","text":"","title":"Solve Day to Day Problems Using Python Live Session - 3"},{"location":"lec04/","text":"Lecture 04: How to use google colab effectively","title":"Lecture 04"},{"location":"lec04/#lecture-04","text":"","title":"Lecture 04:"},{"location":"lec04/#how-to-use-google-colab-effectively","text":"","title":"How to use google colab effectively"},{"location":"lec05/","text":"Lecture 05: How to manage files on your phone using python By Sunny","title":"Lecture 05"},{"location":"lec05/#lecture-05","text":"","title":"Lecture 05:"},{"location":"lec05/#how-to-manage-files-on-your-phone-using-python-by-sunny","text":"","title":"How to manage files on your phone using python By Sunny"},{"location":"lec06/","text":"Lecture 06: How to use python plus your phone to control your system by Sunny | Day 6 Code used in the lecture rx.py import socket import argparse from pynput.keyboard import Key , Controller keyboard = Controller () s = socket . socket ( socket . AF_INET , socket . SOCK_DGRAM ) s . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) s . setsockopt ( socket . SOL_SOCKET , socket . SO_BROADCAST , 1 ) def control ( signals ): for signal in signals [ \"signal_release\" ]: keyboard . release ( signal ) keyboard . press ( signals [ \"signal_on\" ]) def main ( host , port ): print ( f \"host: { host } , port: { port } \" ) s . bind (( host , int ( port ))) while True : try : BYTE = 8192 message , address = s . recvfrom ( BYTE ) LIST_DATA = str ( message ) . split ( \",\" ) rcvd_length = len ( LIST_DATA ) EXPECTED_LEN = 17 if rcvd_length == EXPECTED_LEN : gravity_data = LIST_DATA [ - 3 :] for idx , gravity in enumerate ( gravity_data ): gravity_data [ idx ] = float ( gravity . strip ()[: - 1 ]) g_x , g_y , g_z = gravity_data print ( f \"current state: { g_x } , { g_y } , { g_z } \" ) # halt if ( - 3 < g_x < 3 ) and ( - 3 < g_y < 3 ): print ( \"HALT\" ) signals = { \"signal_release\" : [ Key . up , Key . down , Key . left , Key . right ], \"signal_on\" : Key . space } control ( signals ) # forward elif ( - 3 > g_x ) and ( - 3 < g_y < 3 ): print ( \"FORWARD\" ) signals = { \"signal_release\" : [ Key . space , Key . down , Key . left , Key . right ], \"signal_on\" : Key . up } control ( signals ) # retreat elif ( 3 < g_x ) and ( - 3 < g_y < 3 ): print ( \"RETREAT\" ) signals = { \"signal_release\" : [ Key . up , Key . space , Key . left , Key . right ], \"signal_on\" : Key . down } control ( signals ) # left elif ( - 3 < g_x < 3 ) and ( - 3 > g_y ): print ( \"LEFT TURN\" ) signals = { \"signal_release\" : [ Key . up , Key . down , Key . space , Key . right ], \"signal_on\" : Key . left } control ( signals ) # right elif ( - 3 < g_x < 3 ) and ( 3 < g_y ): print ( \"RIGHT TURN\" ) signals = { \"signal_release\" : [ Key . up , Key . down , Key . left , Key . space ], \"signal_on\" : Key . right } control ( signals ) except ( KeyboardInterrupt , SystemExit ): raise except Exception as e : print ( e ) if __name__ == '__main__' : args = argparse . ArgumentParser () args . add_argument ( '--port' , default = 5555 ) args . add_argument ( '--host' , default = \"192.168.0.6\" ) parsed_args = args . parse_args () main ( parsed_args . host , parsed_args . port )","title":"Lecture 06"},{"location":"lec06/#lecture-06","text":"","title":"Lecture 06:"},{"location":"lec06/#how-to-use-python-plus-your-phone-to-control-your-system-by-sunny-day-6","text":"","title":"How to use python plus your phone to control your system by Sunny | Day 6"},{"location":"lec06/#code-used-in-the-lecture","text":"rx.py import socket import argparse from pynput.keyboard import Key , Controller keyboard = Controller () s = socket . socket ( socket . AF_INET , socket . SOCK_DGRAM ) s . setsockopt ( socket . SOL_SOCKET , socket . SO_REUSEADDR , 1 ) s . setsockopt ( socket . SOL_SOCKET , socket . SO_BROADCAST , 1 ) def control ( signals ): for signal in signals [ \"signal_release\" ]: keyboard . release ( signal ) keyboard . press ( signals [ \"signal_on\" ]) def main ( host , port ): print ( f \"host: { host } , port: { port } \" ) s . bind (( host , int ( port ))) while True : try : BYTE = 8192 message , address = s . recvfrom ( BYTE ) LIST_DATA = str ( message ) . split ( \",\" ) rcvd_length = len ( LIST_DATA ) EXPECTED_LEN = 17 if rcvd_length == EXPECTED_LEN : gravity_data = LIST_DATA [ - 3 :] for idx , gravity in enumerate ( gravity_data ): gravity_data [ idx ] = float ( gravity . strip ()[: - 1 ]) g_x , g_y , g_z = gravity_data print ( f \"current state: { g_x } , { g_y } , { g_z } \" ) # halt if ( - 3 < g_x < 3 ) and ( - 3 < g_y < 3 ): print ( \"HALT\" ) signals = { \"signal_release\" : [ Key . up , Key . down , Key . left , Key . right ], \"signal_on\" : Key . space } control ( signals ) # forward elif ( - 3 > g_x ) and ( - 3 < g_y < 3 ): print ( \"FORWARD\" ) signals = { \"signal_release\" : [ Key . space , Key . down , Key . left , Key . right ], \"signal_on\" : Key . up } control ( signals ) # retreat elif ( 3 < g_x ) and ( - 3 < g_y < 3 ): print ( \"RETREAT\" ) signals = { \"signal_release\" : [ Key . up , Key . space , Key . left , Key . right ], \"signal_on\" : Key . down } control ( signals ) # left elif ( - 3 < g_x < 3 ) and ( - 3 > g_y ): print ( \"LEFT TURN\" ) signals = { \"signal_release\" : [ Key . up , Key . down , Key . space , Key . right ], \"signal_on\" : Key . left } control ( signals ) # right elif ( - 3 < g_x < 3 ) and ( 3 < g_y ): print ( \"RIGHT TURN\" ) signals = { \"signal_release\" : [ Key . up , Key . down , Key . left , Key . space ], \"signal_on\" : Key . right } control ( signals ) except ( KeyboardInterrupt , SystemExit ): raise except Exception as e : print ( e ) if __name__ == '__main__' : args = argparse . ArgumentParser () args . add_argument ( '--port' , default = 5555 ) args . add_argument ( '--host' , default = \"192.168.0.6\" ) parsed_args = args . parse_args () main ( parsed_args . host , parsed_args . port )","title":"Code used in the lecture"}]}